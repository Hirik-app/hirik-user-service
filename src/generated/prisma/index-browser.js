
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  countryCode: 'countryCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobRoleId: 'jobRoleId',
  fullName: 'fullName',
  email: 'email',
  bio: 'bio',
  location: 'location',
  expectedSalary: 'expectedSalary',
  yearsOfExperience: 'yearsOfExperience',
  availableToStart: 'availableToStart',
  immediateJoiner: 'immediateJoiner',
  preferredRole: 'preferredRole',
  profilePicture: 'profilePicture',
  cvLink: 'cvLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecruiterProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  companyId: 'companyId',
  jobRoleId: 'jobRoleId',
  workEmail: 'workEmail',
  location: 'location',
  isVerified: 'isVerified',
  workEmailVerified: 'workEmailVerified',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationTokenExpiresAt: 'emailVerificationTokenExpiresAt',
  recruiterVerificationMethodsId: 'recruiterVerificationMethodsId',
  verifiedBy: 'verifiedBy',
  verificationDetails: 'verificationDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecruiterVerificationMethodsScalarFieldEnum = {
  id: 'id',
  method: 'method'
};

exports.Prisma.SavedJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  createdAt: 'createdAt'
};

exports.Prisma.SkillUserMapScalarFieldEnum = {
  id: 'id',
  skillId: 'skillId',
  profileId: 'profileId',
  createdAt: 'createdAt'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  degree: 'degree',
  institution: 'institution',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade',
  description: 'description',
  isCurrent: 'isCurrent'
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  jobRoleId: 'jobRoleId',
  companyId: 'companyId',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  rolesAndResponsibilities: 'rolesAndResponsibilities'
};

exports.Prisma.ResumeScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  title: 'title',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isDefault: 'isDefault',
  isActive: 'isActive',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobMatches: 'jobMatches',
  applications: 'applications',
  interviews: 'interviews',
  messages: 'messages',
  emailEnabled: 'emailEnabled',
  pushEnabled: 'pushEnabled',
  quietHours: 'quietHours',
  frequency: 'frequency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobSearchPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  desiredJobTypes: 'desiredJobTypes',
  minSalary: 'minSalary',
  maxSalary: 'maxSalary',
  salaryCurrency: 'salaryCurrency',
  salaryPeriod: 'salaryPeriod',
  desiredLocations: 'desiredLocations',
  isRemoteOnly: 'isRemoteOnly',
  isWillingToRelocate: 'isWillingToRelocate',
  maxCommuteMiles: 'maxCommuteMiles',
  desiredRoles: 'desiredRoles',
  desiredSkills: 'desiredSkills',
  yearsOfExperience: 'yearsOfExperience',
  desiredIndustries: 'desiredIndustries',
  minCompanySize: 'minCompanySize',
  maxCompanySize: 'maxCompanySize',
  excludedCompanies: 'excludedCompanies',
  isSearchActive: 'isSearchActive',
  lastSearchDate: 'lastSearchDate',
  savedSearches: 'savedSearches',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FCMTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  platform: 'platform',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  countryCode: 'countryCode',
  otp: 'otp',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  userId: 'userId',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailOTPScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  userId: 'userId',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  RecruiterProfile: 'RecruiterProfile',
  RecruiterVerificationMethods: 'RecruiterVerificationMethods',
  SavedJob: 'SavedJob',
  SkillUserMap: 'SkillUserMap',
  Education: 'Education',
  Experience: 'Experience',
  Resume: 'Resume',
  NotificationPreferences: 'NotificationPreferences',
  JobSearchPreferences: 'JobSearchPreferences',
  FCMToken: 'FCMToken',
  OTP: 'OTP',
  EmailOTP: 'EmailOTP'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
